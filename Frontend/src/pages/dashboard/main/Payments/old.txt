this was my stkpush update it to make sure 
The CheckoutRequestID is returned by the M-Pesa API as soon as the STK push request is made. You need to store it in the database immediately after receiving it from the API response.
export const stkPush = async (c: Context) => {
  try {
    const { phone_number, amount, booking_id } = await c.req.json();

    // Trim and log the phone number
    const trimmedPhone = phone_number.trim();
    console.log("Received phone number:", trimmedPhone);

    // Validate Inputs
    if (!/^254\d{9}$/.test(trimmedPhone)) {
      console.error("Invalid phone number format:", trimmedPhone);
      return c.json({ error: "Invalid phone format. Use 254XXXXXXXXX." }, 400);
    }
    if (amount <= 0) {
      return c.json({ error: "Amount must be greater than zero." }, 400);
    }

    // Generate OAuth token
    const token = await getMpesaToken();
    console.log("OAuth Token:", token);

    // Generate timestamp and password
    const timestamp = new Date()
      .toISOString()
      .replace(/[^0-9]/g, "")
      .slice(0, 14);
    const password = Buffer.from(
      `${mpesa.businessShortCode}${mpesa.passKey}${timestamp}`
    ).toString("base64");

    console.log("Timestamp:", timestamp);
    console.log("Password:", password);

    // Prepare payload
    const payload = {
      BusinessShortCode: mpesa.businessShortCode,
      Password: password,
      Timestamp: timestamp,
      TransactionType: "CustomerPayBillOnline",
      Amount: amount,
      PartyA: trimmedPhone,
      PartyB: mpesa.partyB,
      PhoneNumber: trimmedPhone,
      CallBackURL: mpesa.callBackURL,
      AccountReference: "TestPayment",
      TransactionDesc: "Payment for services",
    };

    console.log("STK Push Payload:", JSON.stringify(payload, null, 2));

    // Send request to M-Pesa API
    const response = await fetch(mpesa.stkUrl, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorResponse = await response.text();
      console.error("M-Pesa STK Push Failed:", errorResponse);
      throw new Error(`M-Pesa STK Push Failed: ${response.statusText}`);
    }

    const result = (await response.json()) as MpesaResponse;
    const mpesa_receipt_number = result?.MpesaReceiptNumber ?? null; // ✅ Now correctly assigned

    if (result.errorCode) {
      return c.json({ error: result.errorMessage || "STK push failed" }, 400);
    }


   


    const insertedPayment = await db.insert(paymentsTable).values({
      booking_id: Number(booking_id), // Ensure this is a number
      amount: String(amount), // Convert amount to string if required
      transaction_reference: result.CheckoutRequestID || "", // Ensure it's always a string
      payment_status: "pending",
      phone_number: trimmedPhone, // Ensure phone_number is a string
      mpesa_receipt_number: mpesa_receipt_number || "", // Ensure it's a string
      payment_method: "M-Pesa",
      payment_date: new Date(),
    });
    
    
    
    


    console.log("Inserted payment record:", insertedPayment);

    return c.json({ 
      message: "STK push initiated successfully", 
      data: result 
    });

  } catch (error: any) {
    console.error("STK Push Error:", error);
    return c.json({ error: error.message }, 500);
  }
};


this was my frontend
import { useState } from 'react';
import { Toaster, toast } from 'sonner';

interface MpesaPaymentModalProps {
  bookingId: number;
  amount: number;
  onClose: () => void;
  onPaymentSuccess: () => void;
  onPaymentFailure: () => void;
}

const MpesaPaymentModal: React.FC<MpesaPaymentModalProps> = ({
  bookingId,
  amount,
  onClose,
  onPaymentSuccess,
  onPaymentFailure,
}) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handlePayment = async () => {
    if (!phoneNumber || phoneNumber.length !== 12 || !phoneNumber.startsWith('254')) {
      toast.error('Please enter a valid phone number starting with 254.');
      return;
    }

    setIsSubmitting(true);

    try {
      // Call the STK Push endpoint
      const response = await fetch('https://backenc-automated-psvbs-deployment.onrender.com/mpesa/stkpush', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone_number: phoneNumber,
          amount,
          booking_id: bookingId,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success('Payment initiated successfully. Please complete the payment on your phone.');

        // Extract CheckoutRequestID from the STK Push response
        const checkoutRequestID = data.CheckoutRequestID;

        if (!checkoutRequestID) {
          toast.error('Failed to retrieve CheckoutRequestID.');
          onPaymentFailure();
          return;
        }

        // Wait for 10 seconds to give the user time to respond to the STK Push
        setTimeout(() => {
          // Poll the backend for payment confirmation
          const pollPaymentStatus = async () => {
            try {
              const statusResponse = await fetch(
                `https://backenc-automated-psvbs-deployment.onrender.com/payment-status?checkout_request_id=${checkoutRequestID}`
              );
              const statusData = await statusResponse.json();

              if (statusData.payment_status === 'completed') {
                toast.success('Payment confirmed successfully!');
                onPaymentSuccess(); // Trigger success handler
              } else if (statusData.payment_status === 'failed') {
                toast.error('Payment failed. Please try again.');
                onPaymentFailure(); // Trigger failure handler
              } else {
                // Continue polling if payment is still pending
                setTimeout(pollPaymentStatus, 3000); // Poll every 3 seconds
              }
            } catch (error) {
              console.error('Error polling payment status:', error);
              toast.error('An error occurred while confirming payment.');
              onPaymentFailure(); // Trigger failure handler
            }
          };

          // Start polling
          pollPaymentStatus();
        }, 10000); // Wait 10 seconds before polling
      } else {
        toast.error(data.error || 'Failed to initiate payment. Please try again.');
        onPaymentFailure();
      }
    } catch (error) {
      toast.error('An error occurred while initiating payment.');
      onPaymentFailure(); // Trigger failure handler
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <Toaster />
      <div className="bg-white p-6 rounded-lg shadow-lg w-full md:w-1/3">
        <h2 className="text-xl font-bold mb-4">M-Pesa Payment</h2>
        <div className="mb-4">
          <label htmlFor="phoneNumber" className="block mb-1">Phone Number</label>
          <input
            type="text"
            id="phoneNumber"
            value={phoneNumber}
            onChange={(e) => setPhoneNumber(e.target.value)}
            className="border rounded w-full py-2 px-3"
            placeholder="254XXXXXXXXX"
          />
        </div>
        <div className="mb-4">
          <p className="text-lg font-semibold">Amount: KSh {amount.toFixed(2)}</p>
          <p className="text-lg font-semibold">Booking ID: {bookingId}</p>
        </div>
        <div className="flex justify-between">
          <button type="button" onClick={onClose} className="text-gray-600 hover:text-gray-800">Cancel</button>
          <button
            type="button"
            onClick={handlePayment}
            className={`bg-blue-500 text-white px-4 py-2 rounded ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Processing...' : 'Pay via M-Pesa'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default MpesaPaymentModal;
The frontend should expect the CheckoutRequestID to be returned immediately after the STK push request is made. You don’t need to wait for the user to enter their PIN to get the CheckoutRequestID.