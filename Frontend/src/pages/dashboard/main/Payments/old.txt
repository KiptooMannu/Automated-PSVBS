which column in my db is CheckoutRequestID  saved , ?based on your codes 
which code specifically
on this frontend show me where frontend is returning it 
import { useState } from 'react';
import { Toaster, toast } from 'sonner';

interface MpesaPaymentModalProps {
  bookingId: number;
  amount: number;
  onClose: () => void;
  onPaymentSuccess: () => void;
  onPaymentFailure: () => void;
}

const MpesaPaymentModal: React.FC<MpesaPaymentModalProps> = ({
  bookingId,
  amount,
  onClose,
  onPaymentSuccess,
  onPaymentFailure,
}) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handlePayment = async () => {
    if (!phoneNumber || phoneNumber.length !== 12 || !phoneNumber.startsWith('254')) {
      toast.error('Please enter a valid phone number starting with 254.');
      return;
    }

    setIsSubmitting(true);

    try {
      // Call the STK Push endpoint
      const response = await fetch('/mpesa/stkpush', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          phone_number: phoneNumber,
          amount,
          booking_id: bookingId,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast.success('Payment initiated successfully. Please complete the payment on your phone.');
        onPaymentSuccess();
      } else {
        toast.error(data.error || 'Failed to initiate payment. Please try again.');
        onPaymentFailure();
      }
    } catch (error) {
      toast.error('An error occurred while initiating payment.');
      onPaymentFailure(); // Trigger failure handler
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <Toaster />
      <div className="bg-white p-6 rounded-lg shadow-lg w-full md:w-1/3">
        <h2 className="text-xl font-bold mb-4">M-Pesa Payment</h2>
        <div className="mb-4">
          <label htmlFor="phoneNumber" className="block mb-1">Phone Number</label>
          <input
            type="text"
            id="phoneNumber"
            value={phoneNumber}
            onChange={(e) => setPhoneNumber(e.target.value)}
            className="border rounded w-full py-2 px-3"
            placeholder="254XXXXXXXXX"
          />
        </div>
        <div className="mb-4">
          <p className="text-lg font-semibold">Amount: KSh {amount.toFixed(2)}</p>
          <p className="text-lg font-semibold">Booking ID: {bookingId}</p>
        </div>
        <div className="flex justify-between">
          <button type="button" onClick={onClose} className="text-gray-600 hover:text-gray-800">Cancel</button>
          <button
            type="button"
            onClick={handlePayment}
            className={`bg-blue-500 text-white px-4 py-2 rounded ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Processing...' : 'Pay via M-Pesa'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default MpesaPaymentModal;
on this booking controller 
import { Context } from 'hono';
import { createBookingService, getAllVehiclesWithBookingsService } from './booking.service';
import db from '../drizzle/db';
import { bookingsSeatsTable, bookingTable ,vehicleTable } from '../drizzle/schema';
import { eq, desc,and } from "drizzle-orm";

// Helper function to validate and parse dates
const parseValidDate = (date: any): Date | null => {
    if (!date) return null;
    const parsedDate = new Date(date);
    return isNaN(parsedDate.getTime()) ? null : parsedDate;
};

// ✅ Create Booking Controller
export const createBookingController = async (c: Context) => {
    try {
        const {
            user_id,
            vehicle_id,
            seat_numbers,
            booking_date,
            departure_date,
            departure,
            destination,
            estimated_arrival,
            price,
            total_price,
        }: {
            user_id: number;
            vehicle_id: string;
            seat_numbers: string[];
            booking_date: string;
            departure_date: string;
            departure: string;
            destination: string;
            estimated_arrival: string | null;
            price: string;
            total_price: string;
        } = await c.req.json();

        console.log("📌 Vehicle ID:", vehicle_id);

        if (!user_id || !vehicle_id || !seat_numbers.length || !price || !total_price || !booking_date || !departure_date) {
            return c.json({ message: "Missing required booking details." }, 400);
        }

        // ✅ Fetch departure_time from vehicleTable
        const vehicle = await db.query.vehicleTable.findFirst({
            where: eq(vehicleTable.registration_number, vehicle_id),
            columns: { departure_time: true },
        });

        if (!vehicle?.departure_time) {
            return c.json({ message: "Vehicle departure time not found." }, 404);
        }

        // ✅ Convert dates
        const formattedBookingDate = parseValidDate(booking_date);
        const formattedDepartureDate = parseValidDate(departure_date);

        if (!formattedBookingDate || !formattedDepartureDate) {
            return c.json({ message: "Invalid date format." }, 400);
        }

        // ✅ Convert seat numbers to seat IDs
        const seat_ids = seat_numbers.map((seat) => parseInt(seat.replace("S", ""), 10));

        // ✅ Ensure total_price is correct
        const calculatedTotalPrice = seat_ids.length * parseFloat(price);
        if (parseFloat(total_price) !== calculatedTotalPrice) {
            return c.json({ message: "Total price mismatch." }, 400);
        }

        // ✅ Create booking (Without departure_time)
        const bookingId = await createBookingService({
            user_id,
            vehicle_id,
            booking_date: formattedBookingDate,
            departure_date: formattedDepartureDate,
            departure_time: vehicle.departure_time, // ✅ Use fetched departure_time
            departure,
            destination,
            estimated_arrival,
            price,
            total_price: calculatedTotalPrice.toString(),
            seat_numbers,
        });

        return c.json({ message: "Booking created successfully!", booking_id: bookingId }, 201);
    } catch (error) {
        console.error("Error creating booking:", error);
        return c.json({ message: "Internal server error." }, 500);
    }
};



export const getBookedSeatsController = async (c: Context) => {
  try {
    const vehicle_id = c.req.query("vehicle_id");

    if (!vehicle_id) {
      return c.json({ message: "Missing vehicle_id." }, 400);
    }

    const bookedSeats = await db.query.bookingsSeatsTable.findMany({
      where: and(
        eq(bookingsSeatsTable.vehicle_id, vehicle_id),
        // Only include seats from confirmed bookings
        eq(bookingTable.booking_status, 'confirmed')
      ),
      columns: { seat_id: true }
    });

    return c.json({ booked_seats: bookedSeats.map(bs => `S${bs.seat_id}`) }, 200);
  } catch (error) {
    console.error("Error retrieving booked seats:", error);
    return c.json({ message: "Internal server error" }, 500);
  }
};


// ✅ Fetch All Vehicles With Bookings (Departure Date & Time)
export const getAllVehiclesWithBookingsController = async (c: Context) => {
    try {
        const vehiclesWithBookings = await getAllVehiclesWithBookingsService();
        return c.json(vehiclesWithBookings, 200);
    } catch (error) {
        console.error("Error fetching vehicles with bookings:", error);
        return c.json({ message: "Internal server error" }, 500);
    }
};

// ✅ Fetch All Bookings
import { sql } from "drizzle-orm"; // ✅ Use raw SQL aggregation


export const getAllBookingsController = async (c: Context) => {
    try {
        const bookings = await db
            .select({
                booking_id: bookingTable.booking_id,
                user_id: bookingTable.user_id,
                vehicle_id: bookingTable.vehicle_id,
                departure_date: bookingTable.departure_date,
                departure_time: vehicleTable.departure_time, // ✅ Fix: Now vehicleTable is joined
                departure: bookingTable.departure,
                destination: bookingTable.destination,
                total_price: bookingTable.total_price,
                booking_status: bookingTable.booking_status,
                booking_date: bookingTable.booking_date,
                seat_ids: sql<string>`COALESCE(STRING_AGG(${bookingsSeatsTable.seat_id}::TEXT, ','), 'N/A')`.as("seat_ids"),
            })
            .from(bookingTable)
            .leftJoin(vehicleTable, eq(bookingTable.vehicle_id, vehicleTable.registration_number)) // ✅ Add this join
            .leftJoin(bookingsSeatsTable, eq(bookingTable.booking_id, bookingsSeatsTable.booking_id))
            .groupBy(bookingTable.booking_id, vehicleTable.departure_time) // ✅ Group by departure_time to avoid aggregation issues
            .execute();

        return c.json(bookings, 200);
    } catch (error) {
        console.error("Error fetching bookings:", error);
        return c.json({ message: "Internal server error" }, 500);
    }
};


export const getBookingsByUserIdController = async (c: Context) => {
    try {
        const user_id = parseInt(c.req.param("user_id")); // Extract user_id from URL params

        if (isNaN(user_id)) {
            return c.json({ message: "Invalid user ID." }, 400);
        }

        const userBookings = await db
            .select({
                booking_id: bookingTable.booking_id,
                user_id: bookingTable.user_id,
                vehicle_id: bookingTable.vehicle_id,
                booking_date: bookingTable.booking_date,
                departure: bookingTable.departure,
                destination: bookingTable.destination,
                total_price: bookingTable.total_price,
                departure_date: bookingTable.departure_date,
                estimated_arrival: bookingTable.estimated_arrival,
                price: bookingTable.price,
                booking_status: bookingTable.booking_status,
                is_active: bookingTable.is_active,
                departure_time: vehicleTable.departure_time,
            })
            .from(bookingTable)
            .leftJoin(vehicleTable, eq(bookingTable.vehicle_id, vehicleTable.registration_number))
            .where(eq(bookingTable.user_id, user_id));

        return c.json(userBookings, 200); // Return JSON response
    } catch (error) {
        console.error("Error fetching user bookings:", error);
        return c.json({ message: "Internal server error." }, 500);
    }
};



// ✅ Confirm Booking Controller
export const confirmBookingController = async (c: Context) => {
    try {
        const { booking_id }: { booking_id: number } = await c.req.json();

        if (!booking_id) {
            return c.json({ message: "Booking ID is required." }, 400);
        }

        // ✅ Check if the booking exists
        const existingBooking = await db.query.bookingTable.findFirst({
            where: eq(bookingTable.booking_id, booking_id),
        });

        if (!existingBooking) {
            return c.json({ message: "Booking not found." }, 404);
        }

        if (existingBooking.booking_status === "confirmed" || existingBooking.booking_status === "completed") {
            return c.json({ message: "Booking is already confirmed or completed." }, 200);
        }

        // ✅ Update the booking status to "confirmed"
        await db.update(bookingTable)
            .set({ booking_status: "confirmed" })
            .where(eq(bookingTable.booking_id, booking_id));

        return c.json({ message: "Booking confirmed successfully.", success: true }, 200);
    } catch (error) {
        console.error("Error confirming booking:", error);
        return c.json({ message: "Internal server error" }, 500);
    }
};
modify it so that payment status will be fetched and displayed on my bookings.tsx
import { useGetUserBookingQuery, useUpdateBookingVehicleMutation } from "../../../../features/booking/bookingAPI";
import { useSelector } from "react-redux";
import { RootState } from "../../../../app/store";
import { format } from "date-fns";
import { toast } from "sonner";

function MyBookings() {
  const user = useSelector((state: RootState) => state.user);
  const userId = user.user?.user_id ?? 0; 

  const { data: booking, error, isLoading, refetch } = useGetUserBookingQuery(userId);
  const [updateBooking] = useUpdateBookingVehicleMutation();

  const formatDate = (isoDate: string | number | Date | null | undefined) => {
    if (!isoDate) return "N/A"; // Handle missing dates
    const date = new Date(isoDate);
    return isNaN(date.getTime()) ? "Invalid Date" : format(date, "MM/dd/yyyy HH:mm:ss");
  };

  const handleCancelBooking = async (bookingId: number) => {
    try {
      await updateBooking({
        booking_id: bookingId,
        booking_status: "cancelled",
      }).unwrap();
      toast.success("Booking cancelled successfully");
      refetch(); // Refresh the data
    } catch (error) {
      toast.error("Failed to cancel booking");
      console.error("Error:", error);
    }
  };

  return (
    <div className="bg-slate-200 min-h-screen">
      <div className="mx-auto bg-slate-200 w-full rounded-md mb-5 border-2">
        <h2 className="text-center text-xl p-2 rounded-t-md text-webcolor font-bold">My Booking History</h2>

        {/* Loading State */}
        {isLoading && <div className="text-center text-gray-600">Loading...</div>}

        {/* Error State */}
        {error && <div className="text-center text-red-500">Error loading bookings</div>}

        {/* No Booking Found State */}
        {!isLoading && !error && (!booking || booking.length === 0) && (
          <div className="text-center text-gray-600">No bookings found</div>
        )}

        <div className="overflow-x-auto">
          <table className="table-auto w-full">
            <thead>
              <tr className="bg-slate-700">
                <th className="px-4 py-2 text-left text-text-light">Booking ID</th>
                <th className="px-4 py-2 text-left text-text-light">Vehicle ID</th>
                <th className="px-4 py-2 text-left text-text-light">User ID</th>
                <th className="px-4 py-2 text-left text-text-light">Seats ID</th>
                <th className="px-4 py-2 text-left text-text-light">Booking Date</th>
                <th className="px-4 py-2 text-left text-text-light">Return Date</th>
                <th className="px-4 py-2 text-left text-text-light">Total Amount</th>
                <th className="px-4 py-2 text-left text-text-light">Booking Status</th>
                <th className="px-4 py-2 text-left text-text-light">Action</th>
              </tr>
            </thead>
            <tbody>
              {(booking || []).map((booking) => (
                <tr key={booking.booking_id} className="border-b border-slate-600">
                  <td className="px-4 py-2">{booking.booking_id}</td>
                  <td className="px-4 py-2">{booking.vehicle_id}</td>
                  <td className="px-4 py-2">{booking.user_id}</td>
                  <td className="px-4 py-2">{booking.seat_ids}</td>
                  <td className="px-4 py-2">{formatDate(booking.booking_date)}</td>
                  <td className="px-4 py-2">
                    {booking.vehicle ? formatDate(booking.vehicle.departure_time) : "N/A"}
                  </td>
                  <td className="px-4 py-2">{booking.total_price}</td>
                  <td className="px-4 py-2">{booking.booking_status}</td>
                  <td className="px-4 py-2">
                    {booking.booking_status === "pending" && (
                      <button
                        onClick={() => handleCancelBooking(booking.booking_id)}
                        className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
                      >
                        Cancel
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default MyBookings;

and he cancel booking should be working well and explain how it should be working and tell me where specifically im i supposed to input other codes

======================================================================================================================================================
import { useState } from 'react';
import { useSelector } from 'react-redux';
import { format } from 'date-fns';
import { RootState } from '../../../../app/store';
import { toast, Toaster } from 'sonner';
import { Link } from 'react-router-dom';
import { bookingVehicleAPI } from '../../../../features/booking/bookingAPI';
import { Tbooking } from '../../../../features/booking/bookingAPI';
import { paymentAPI } from '../../../../features/payments/paymentAPI';

const Payment = () => {
  const user = useSelector((state: RootState) => state.user);
  const user_id = user.user?.user_id || 0;
  console.log('User ID is:', user_id);

  const { data: bookingData, refetch } = bookingVehicleAPI.useGetUserBookingQuery(user_id);
  const [createPayment] = paymentAPI.useCreatePaymentMutation();
  const [isPaymentLoading, setIsPaymentLoading] = useState<number | null>(null);
  const [showMpesaForm, setShowMpesaForm] = useState<boolean>(false);
  const [selectedBooking, setSelectedBooking] = useState<{ booking_id: number; total_price: string } | null>(null);
  const [paymentStatus, setPaymentStatus] = useState<{ success: boolean; message: string } | null>(null);

  const formatDate = (isoDate: string | Date): string => {
    if (!isoDate) return 'Invalid date';
    const date = new Date(isoDate);
    if (isNaN(date.getTime())) return 'Invalid date';
    return format(date, 'MM/dd/yyyy');
  };

  const sortedBookingData = bookingData
    ?.slice()
    .sort((a, b) => {
      const aPaid = a.payments?.some(p => p.payment_status === "completed");
      const bPaid = b.payments?.some(p => p.payment_status === "completed");

      // Show unpaid bookings first
      if (aPaid && !bPaid) return 1;
      if (!aPaid && bPaid) return -1;

      // If both are unpaid or both are paid, sort by latest booking date
      return new Date(b.booking_date).getTime() - new Date(a.booking_date).getTime();
    });

  const recentUnpaidBooking = bookingData
    ?.slice()
    .sort((a, b) => new Date(b.booking_date).getTime() - new Date(a.booking_date).getTime())
    .find(booking => !booking.payments?.some(p => p.payment_status === "completed"));

  const handleMakePayment = (booking_id: number, total_price: string) => {
    setSelectedBooking({ booking_id, total_price });
    setShowMpesaForm(true);
  };

  const handleMpesaPayment = async (phone_number: string) => {
    if (!selectedBooking) return;
  
    const { booking_id, total_price } = selectedBooking;
    const amountNumber = parseFloat(total_price);
  
    if (isNaN(amountNumber)) {
      toast.error("Invalid amount");
      return;
    }
  
    setIsPaymentLoading(booking_id);
  
    try {
      console.log("🚀 Initiating M-Pesa STK Push...");
  
      // ✅ Initiate M-Pesa STK Push
      const response = await fetch(
        "https://backenc-automated-psvbs-deployment.onrender.com/mpesa/stkpush",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            phone_number,
            amount: amountNumber,
            booking_id,
            CallBackURL: "https://backenc-automated-psvbs-deployment.onrender.com/mpesa/callback",
            AccountReference: `Booking_${booking_id}`,
            TransactionDesc: "Payment for booking",
          }),
        }
      );
  
      if (!response.ok) {
        const errorResponse = await response.json();
        console.error("❌ STK Push Request Failed:", errorResponse);
        throw new Error(errorResponse.message || "Failed to initiate M-Pesa payment");
      }
  
      // ✅ Parse STK Response
      let stkResponse;
      try {
        stkResponse = await response.json();
      } catch (jsonError) {
        console.error("❌ Error parsing JSON response:", jsonError);
        toast.error("❌ Invalid response from M-Pesa. Contact support.");
        return;
      }
  
      // ✅ Log the full response for debugging
      console.log("🔍 Full STK Response:", stkResponse);
  
      // ✅ Ensure we're accessing the correct structure
      const stkData = stkResponse?.data;
      if (!stkData || !stkData.ResponseCode) {
        console.error("❌ Invalid STK Response format:", stkResponse);
        toast.error("❌ Unexpected response from M-Pesa. Contact support.");
        return;
      }
  
      if (stkData.ResponseCode === "0") {
        console.log("✅ M-Pesa STK Push successful:", stkData);
        toast.success("✅ M-Pesa payment initiated. Enter your PIN.");
  
        // ✅ Save payment record
       // ✅ Save payment record
try {
  const paymentPayload = {
    booking_id,
    amount: amountNumber.toString(), // Ensure amount is a string if the server expects it
    phone_number, // Include phone_number in the payload
    payment_method: "M-Pesa",
    payment_status: "pending",
    transaction_reference: stkData.CheckoutRequestID,
  };

  console.log("🔍 Payment Payload:", paymentPayload);

  const paymentResponse = await createPayment(paymentPayload).unwrap();
  console.log("✅ Payment record created:", paymentResponse);
} catch (error) {
  console.error("❌ Failed to create payment record:", error);

  // Log the full error response from the server
  if (error && typeof error === "object" && "data" in error) {
    const serverError = error as { data: { error: string; details?: any } };
    console.error("🔍 Server Error Response:", serverError.data);
    toast.error(`❌ Payment record creation failed: ${serverError.data?.error || "Unknown error"}`);
  } else {
    toast.error("❌ Payment record creation failed: Unknown error");
  }
  return;
}
  
        // ✅ Start polling payment status
        checkPaymentStatus(stkData.CheckoutRequestID, booking_id.toString());
      } else {
        console.error("❌ STK Push Failed:", stkData.ResponseDescription || "Unknown error");
        toast.error(`❌ Payment failed: ${stkData.ResponseDescription || "Unknown error"}`);
        return;
      }
    } catch (error) {
      console.error("❌ Error initiating M-Pesa payment:", error);
      setPaymentStatus({ success: false, message: "❌ Failed to initiate M-Pesa payment. Please try again." });
      toast.error("❌ Failed to initiate M-Pesa payment. Please try again.");
    } finally {
      setIsPaymentLoading(null);
      setShowMpesaForm(false);
    }
  };
  
  // ✅ Function to check payment status
  const checkPaymentStatus = async (checkoutRequestID: string, booking_id: string) => {
    let paymentStatusChecked = 0;
    const maxRetries = 6; // 10s interval → 60s timeout
  
    const pollStatus = async () => {
      if (paymentStatusChecked >= maxRetries) {
        console.log("❌ Payment timeout reached.");
        setPaymentStatus({ success: false, message: "❌ Payment timed out. Please try again." });
        toast.error("❌ Payment timed out. Please try again.");
        return;
      }
  
      try {
        const updatedBooking = await bookingVehicleAPI.useGetUserBookingQuery(user_id).refetch();
        const booking = updatedBooking.data?.find((b) => b.booking_id === Number(booking_id));
  
        if (booking) {
          const payment = booking.payments?.find(
            (p) => p.transaction_reference === checkoutRequestID
          );
  
          if (payment) {
            switch (payment.payment_status) {
              case "completed":
                console.log("✅ Payment successful.");
                setPaymentStatus({ success: true, message: "✅ Payment completed successfully!" });
                toast.success("✅ Payment completed successfully!");
                refetch();
                return;
              case "failed":
                console.log("❌ Payment failed. User may have canceled.");
                setPaymentStatus({ success: false, message: "❌ Payment failed. Please try again." });
                toast.error("❌ Payment failed. Please try again.");
                refetch();
                return;
              default:
                console.log(`⏳ Still pending... (${paymentStatusChecked + 1}/${maxRetries})`);
                paymentStatusChecked++;
                setTimeout(pollStatus, 10000);
                break;
            }
          }
        }
      } catch (error) {
        console.error("❌ Polling error:", error);
        setTimeout(pollStatus, 10000);
      }
    };
  
    pollStatus();
  };
  

  if (!bookingData || bookingData.length === 0) {
    return (
      <div className="flex flex-col">
        <h2 className="text-center text-xl p-2 rounded-t-md text-webcolor font-bold border-b-2 border-slate-500">
          No Payment History
        </h2>
        <button>
          <Link to="/dashboard/booking_form" className="btn bg-webcolor text-text-light hover:text-black">
            Book a Seat
          </Link>
        </button>
      </div>
    );
  }

  return (
    <>
      <Toaster
        toastOptions={{
          classNames: {
            error: 'bg-red-400',
            success: 'text-green-400',
            warning: 'text-yellow-400',
            info: 'bg-blue-400',
          },
        }}
      />
      {paymentStatus && (
        <div className={`fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${paymentStatus.success ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
          {paymentStatus.message}
        </div>
      )}
      <div className="card shadow-xl mx-auto w-full rounded-md mb-10 border-2 bg-blue-50 min-h-screen">
        <h2 className="text-center text-xl p-2 rounded-t-md text-black font-bold border-b-2 border-slate-500">
          My Payment History
        </h2>

        <div className="overflow-x-auto">
          <table className="table-auto w-full border-collapse">
            <thead>
              <tr className="bg-blue-700">
                <th className="px-4 py-2 text-left text-text-light">User ID</th>
                <th className="px-4 py-2 text-left text-text-light">Booking ID</th>
                <th className="px-4 py-2 text-left text-text-light">Vehicle ID</th>
                <th className="px-4 py-2 text-left text-text-light">Booking Date</th>
                <th className="px-4 py-2 text-left text-text-light">Total Amount</th>
                <th className="px-4 py-2 text-left text-text-light">Booking Status</th>
                <th className="px-4 py-2 text-left text-text-light">Payment Status</th>
                <th className="px-4 py-2 text-left text-text-light">Action</th>
              </tr>
            </thead>
            <tbody>
              {sortedBookingData?.map((booking: Tbooking) => (
                <tr
                  key={booking.booking_id}
                  className={`border-b border-slate-950 ${booking === recentUnpaidBooking ? 'bg-yellow-200' : ''} relative h-25`}
                >
                  <td className="px-4 py-2">{booking.user_id}</td>
                  <td className="px-4 py-2">{booking.booking_id}</td>
                  <td className="px-4 py-2">{booking.vehicle_id}</td>
                  <td className="px-4 py-2">{formatDate(booking.booking_date)}</td>
                  <td className="px-4 py-2">{booking.total_price}</td>
                  <td
                    className={`px-4 py-2 text-center font-bold rounded-md cursor-pointer ${
                      booking.booking_status === "pending"
                        ? "text-orange-700 bg-orange-200 border border-orange-500 shadow-sm"
                        : booking.booking_status === "confirmed"
                        ? "text-blue-700 bg-blue-200 border border-blue-500 shadow-sm"
                        : booking.booking_status === "completed"
                        ? "text-green-700 bg-green-200 border border-green-500 shadow-sm"
                        : "text-gray-700 bg-gray-200 border border-gray-500 shadow-sm"
                    }`}
                  >
                    {booking.booking_status === "pending"
                      ? "🕒 Pending"
                      : booking.booking_status === "confirmed"
                      ? "📌 Confirmed"
                      : booking.booking_status === "completed"
                      ? "✅ Completed"
                      : "❌ Cancelled"}
                  </td>
                  <td
  className={`px-4 py-2 text-center font-bold rounded-md cursor-pointer relative group ${
    booking.payments?.some(p => p.payment_status === "completed")
      ? "text-emerald-700 bg-emerald-50 border border-emerald-200 shadow-sm"
      : booking.payments?.some(p => p.payment_status === "pending") || !booking.payments?.length
      ? "text-amber-700 bg-amber-50 border border-amber-200 shadow-sm"
      : booking.payments?.some(p => p.payment_status === "failed")
      ? "text-rose-700 bg-rose-50 border border-rose-200 shadow-sm"
      : "text-slate-700 bg-slate-50 border border-slate-200 shadow-sm"
  }`}
>
  {booking.payments?.some(p => p.payment_status === "completed")
    ? "✅ Payment Completed"
    : booking.payments?.some(p => p.payment_status === "pending") || !booking.payments?.length
    ? "⏳ Payment Pending"
    : booking.payments?.some(p => p.payment_status === "failed")
    ? "❌ Payment Failed"
    : "💳 No Payment Data"}
</td>

                  <td className="px-4 py-2">
                    <button
                      className={`btn text-white border-none px-4 py-2 rounded-md ${
                        booking.payments?.some(p => p.payment_status === "completed")
                          ? "bg-gray-400 cursor-not-allowed"
                          : booking === recentUnpaidBooking
                          ? "animate-pulse bg-red-600"
                          : "bg-blue-950 hover:bg-blue-800 hover:text-white"
                      }`}
                      onClick={() => handleMakePayment(booking.booking_id, booking.total_price.toString())}
                      disabled={isPaymentLoading === booking.booking_id || booking.payments?.some(p => p.payment_status === "completed")}
                    >
                      {isPaymentLoading === booking.booking_id ? "⏳ Processing..." : "💳 Make Payment"}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* M-Pesa Payment Form */}
        {showMpesaForm && (
  <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
    <div className="bg-white p-6 rounded-lg shadow-lg w-full md:w-1/2 lg:w-1/3">
      {/* Text-Based M-Pesa Logo */}
      <div className="flex justify-center mb-4">
        <span className="text-3xl font-bold text-green-600">M-PESA</span>
      </div>
      <h2 className="text-xl font-bold mb-4 text-center">M-Pesa Payment</h2>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          const phone_number = e.currentTarget.phone_number.value;
          handleMpesaPayment(phone_number);
        }}
      >
        <div className="mb-4">
          <label htmlFor="phone_number" className="block mb-1">Phone Number</label>
          <input
            type="text"
            id="phone_number"
            name="phone_number"
            placeholder="254700000000"
            className="border rounded w-full py-2 px-3"
            required
          />
        </div>
        <div className="mb-4">
          <label htmlFor="amount" className="block mb-1">Amount</label>
          <input
            type="text"
            id="amount"
            name="amount"
            value={selectedBooking?.total_price || ''}
            readOnly
            className="border rounded w-full py-2 px-3 bg-gray-100"
          />
        </div>
        <div className="flex justify-between">
          <button type="button" onClick={() => setShowMpesaForm(false)} className="text-gray-600 hover:text-gray-800">Cancel</button>
          <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
            {isPaymentLoading ? 'Processing...' : 'Pay with M-Pesa'}
          </button>
        </div>
      </form>
    </div>
  </div>
)}


      </div>
    </>
  );
};

export default Payment;